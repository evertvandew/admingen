#!/usr/bin/env python3
"""
Take a XML-server definition, and take out the Page tags, add some HTML overhead and
write them to the file system as static pages.
"""


# TODO: Create directories for the data tables

from admingen.xml_template import processor, Tag, Template
import os, os.path
import sys


page_template = Template("""<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
        <title>${title}</title>
    ${headers}
    <link rel="stylesheet" type="text/css" href="/batic/css/bootstrap.min.css" />
    <link rel="stylesheet" type="text/css" href="/batic/css/font-awesome.min.css" />
    <link rel="stylesheet" type="text/css" href="/batic/css/custom-theme/jquery-ui-1.10.0.custom.css" />
    <link rel="stylesheet" type="text/css" href="/batic/css/style.css" />
    <script src="/batic/js/jquery/jquery-1.11.2.min.js"></script>
    <script src="/batic/js/bootstrap/bootstrap.js"></script>


</head>
<body style="margin-top:0px">
<div id="ackDelete" class="modal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Modal title</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <p>Are you sure?</p>
      </div>
      <div class="modal-footer">
        <button id="ackDeleteYes" type="button" class="btn btn-primary">Yes</button>
        <button id="ackDeleteNo" type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
      </div>
    </div>
  </div>
</div>
${heading}
${lines}
${footer}
</body>
</html>""")


created_pages = []

current_page_context = dict(headers='', title='admingen', heading='', footer='')


def handle_Page(args, lines):
    url = args['url']
    assert ':' not in url
    if url in created_pages:
        raise RuntimeError('Creating page', url, 'for the second time')
    text = page_template.render(lines=lines, **current_page_context)
    dirname, fname = os.path.split('html/'+url.strip('/'))
    print ('Writing:', dirname, fname)
    if not os.path.exists(dirname):
        os.makedirs(dirname)
    with open(os.path.join(dirname, fname), 'w') as out:
        out.write(text)
    return ''


def handle_PageContextValue(args, lines):
    assert 'name' in args
    current_page_context[args['name']] = lines
    return ''

if False:
    os.chdir('/home/ehwaal/projects/sab')
    processor({'Page': Tag('Page', handle_Page),
               'PageContextValue': Tag('PageContextValue', handle_PageContextValue)},
              open('page_definitions.xml'))
else:
    processor({'Page': Tag('Page', handle_Page),
               'PageContextValue': Tag('PageContextValue', handle_PageContextValue)},
              sys.stdin)
