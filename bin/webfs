#!/usr/bin/env python3
""" A simple flask-website container.

Imports one standard module that implements a simple web filesystem server,
optionally add other modules as command-line options.
"""
import os
import sys
import flask
import importlib.util
from argparse import ArgumentParser

from admingen.webfs import add_handlers, set_root
from admingen.data import file_db

if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument('--root-path', dest='root_path', action='store', help='Path to serve.')
    parser.add_argument('-d', '--debug', dest='debug', action='store_true',
                        help='Run in debug mode.')
    parser.add_argument('host', action='store', nargs='?', help='Host to bind to.')
    parser.add_argument('port', action='store', type=int, nargs='?', help='Port to listen on.')
    parser.add_argument('--filename', '-f', nargs='*', default=[],
                        help='One or more modules that are loaded as part of the web application')
    parser.add_argument('--datamodel', default=None)
    
    args = parser.parse_args()
    
    print('cwd:', os.getcwd())
    print('pythonpath:', os.environ.get('PYTHONPATH', ''))

    if args.root_path is not None:
        root_path = args.root_path
    else:
        root_path = os.getcwd()
    set_root(root_path)

    app = flask.Flask(__name__)
    
    add_handlers(app)
    
    context = {}

    if args.datamodel:
        mod_name = os.path.basename(args.datamodel).split('.')[0]
        spec = importlib.util.spec_from_file_location(mod_name, args.datamodel)
        new_mod = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(new_mod)
        context['the_db'] = file_db.FileDatabase('data', new_mod.all_tables)
        context['tables'] = new_mod.all_tables

    for m in args.filename:
        mod_name = os.path.basename(m).split('.')[0]
        new_mod = sys.modules.get(mod_name, None)
        if new_mod is None:
            spec = importlib.util.spec_from_file_location(mod_name, m)
            new_mod = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(new_mod)

        new_mod.add_handlers(app, context)
    
    app.run(threaded=True, host=args.host, port=args.port, debug=args.debug)
