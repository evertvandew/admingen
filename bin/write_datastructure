#!/usr/bin/env python3

import sys
import time
from admingen.xml_template import processor, data_models
import enum

from argparse import ArgumentParser

parser = ArgumentParser()
parser.add_argument('--output', '-o', default=sys.stdout)
parser.add_argument('--input', '-i', default=sys.stdin)
args = parser.parse_args()

# Extract the datamodel from the XML file.

_ = processor(istream=args.input, ostream=open('/dev/null', 'w'))

# Now write the python model file.
file_template = '''""" Generated model file for the project data structures.
This file was generated on {date}. DO NOT CHANGE!
"""

from dataclasses import dataclass
from enum import Enum
from datetime import datetime, date
from decimal import Decimal
from admingen.db_api import ColumnDetails, mkColumnDetails

class enum_type:
    def __init__(self, name, options):
        self.my_enum = Enum(name, options)
    def __call__(self, x):
        return self.my_enum[x]
    def __getattr__(self, key):
        return self.my_enum[key]
    def __str__(self):
        return 'hi'

def formatted_date(fmt):
    """ Custom converter class for dates."""
    class MyDate:
        annotation = f'formatted_date("{{fmt}}")'
        def __init__(self, x):
            if type(x).__name__ == 'MyDate':
                self.dt = x.dt
            else:
                self.dt = datetime.strptime(x, fmt)
            self.fmt = fmt
        def __str__(self):
            return self.dt.strftime(self.fmt)
    return MyDate


DASH = '-'

def date_or_dash(fmt):
    """ Custom converter for either a dash ('-') or a formatted date. """
    class MyDate(formatted_date(fmt)):
        annotation = f'date_or_dash("{{fmt}}")'
        def __init__(self, x):
            if isinstance(x, str) and x == '-':
                self.dt = DASH
            else:
                super().__init__(x)
        def __str__(self):
            if self.dt == DASH:
                return self.dt
            return self.dt.strftime(self.fmt)
    return MyDate


# Define some standard column types
class email(str): pass
class longstr(str): pass
class password(str): pass
class phone(str): pass


# The actual data model.
{model_lines}
'''

class_template = '''@dataclass
class {name}:
    {class_lines}
'''

enum_template = """{name} = enum_type('{name}', '{options}')
"""

lines = []
for database, tables in data_models.items():
    enum_defs = {k: v for k, v in tables.items() if type(v) == enum.EnumMeta}
    class_defs = {k: v for k, v in tables.items() if not type(v) == enum.EnumMeta}
    
    for k, enum_def in enum_defs.items():
        l = enum_template.format(name=k, options=' '.join(t.name for t in enum_def))
        lines.append(l)
    
    for k, cls_def in class_defs.items():
        cls = []
        for name, details in cls_def.items():
            cld = ', '.join(details)
            if len(details) > 1:
                cld = f'mkColumnDetails("{cld}")'
            cls.append(f'{name}: {cld}')
        c = class_template.format(name=k, class_lines='\n    '.join(cls))
        lines.append(c)

model_lines = '\n'.join(lines)
args.output.write(file_template.format(model_lines=model_lines,
                                       date=time.ctime()))
